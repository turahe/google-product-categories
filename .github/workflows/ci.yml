name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test setup script
      run: |
        python setup.py --help || true
        # Test that the script can be imported without errors
        python -c "import setup; print('Setup script imported successfully')"

    - name: Validate Python syntax
      run: |
        python -m py_compile setup.py

    - name: Check file structure
      run: |
        echo "Checking project structure..."
        ls -la
        echo "Checking Python files..."
        find . -name "*.py" -type f

  validate-outputs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run setup script (dry run)
      run: |
        # Test the setup script without actually downloading
        python -c "
        import setup
        processor = setup.GoogleProductTaxonomyProcessor()
        print('Processor initialized successfully')
        print(f'Taxonomy URL: {processor.taxonomy_url}')
        print('All methods available:', [method for method in dir(processor) if not method.startswith('_')])
        "

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        echo "Running security checks..."
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json

  documentation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README
      run: |
        echo "Checking README.md exists and has content..."
        if [ -f "README.md" ]; then
          echo "README.md found"
          echo "Lines in README: $(wc -l < README.md)"
        else
          echo "ERROR: README.md not found"
          exit 1
        fi

    - name: Check LICENSE
      run: |
        echo "Checking LICENSE file..."
        if [ -f "LICENSE" ]; then
          echo "LICENSE found"
        else
          echo "WARNING: LICENSE file not found"
        fi

    - name: Validate markdown
      run: |
        echo "Checking markdown syntax..."
        # Basic markdown validation
        if grep -q "^#" README.md; then
          echo "README.md has headers"
        else
          echo "WARNING: README.md may be missing headers"
        fi
